---
description:
globs:
alwaysApply: false
---
# Clean Code Standards
description: Основные принципы и практики написания чистого, поддерживаемого кода

autoAttach:
  - "**/*.py"
  - "**/*.sql"
  - "**/*.md"
  - "**/tests/**/*"

### 📝 Naming Conventions
- Use intention-revealing names
- Choose descriptive and unambiguous names
- Make meaningful distinctions
- Use pronounceable names
- Use searchable names
- Avoid encodings and prefixes

### 📏 Function Rules
- Small and focused (do one thing)
- Maximum 20 lines recommended
- Few arguments (3 or less)
- No side effects
- Command Query Separation
- DRY (Don't Repeat Yourself)

### 📚 Comments
- Комментарии на русском языке
- Explain WHY not WHAT
- Don't comment out code
- Update comments with code
- Use as clarification
- Document public APIs

### 🏗️ Code Structure
- One concept per class
- High cohesion
- Low coupling
- Follow SOLID principles
- Keep classes small
- Proper abstraction levels

### 🧪 Testing
- One assert per test
- Fast tests
- Independent tests
- Repeatable tests
- Self-validating
- Timely written

### 🔄 Error Handling
- Use exceptions rather than return codes
- Provide context with exceptions
- Define exception classes
- Don't return null
- Don't pass null
- Proper error messages in Russian

### 📊 Code Organization
- Related code stays together
- Consistent abstraction levels
- Proper file organization
- Logical grouping
- Clear dependencies
- Minimize nesting

### 🔄 Project Awareness & Context
- **Always read `PLANNING.md`** at the start of a new conversation to understand the project's architecture, goals, style, and constraints.
- **Check `TASK.md`** before starting a new task. If the task isn't listed, add it with a brief description and today's date.
- **Use consistent naming conventions, file structure, and architecture patterns** as described in `PLANNING.md`.

### 🧱 Code Structure & Modularity
- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
- **Use clear, consistent imports** (prefer relative imports within packages).

### 🧪 Testing & Reliability
- **Always create Pytest unit tests for new features** (functions, classes, routes, etc).
- **After updating any logic**, check whether existing unit tests need to be updated. If so, do it.
- **Tests should live in a `/tests` folder** mirroring the main app structure.
  - Include at least:
    - 1 test for expected use
    - 1 edge case
    - 1 failure case

### ✅ Task Completion
- **Mark completed tasks in `TASK.md`** immediately after finishing them.
- Add new sub-tasks or TODOs discovered during development to `TASK.md` under a "Discovered During Work" section.

### 📎 Style & Conventions
- **Use Python** as the primary language.
- **Follow PEP8**, use type hints, and format with `black`.
- **Use `pydantic` for data validation**.
- Use `FastAPI` for APIs and `SQLAlchemy` or `SQLModel` for ORM if applicable.
- Write **docstrings for every function** using the Google style:
  ```python
  def example():
      """
      Brief summary.

      Args:
          param1 (type): Description.

      Returns:
          type: Description.
      """
  ```

### 📚 Documentation & Explainability
- **Update `README.md`** when new features are added, dependencies change, or setup steps are modified.
- **Comment non-obvious code in Russian** and ensure everything is understandable to a mid-level developer.
- When writing complex logic, **add an inline `# Reason:` comment in Russian** explaining the why, not just the what.

### 🧠 AI Behavior Rules
- **Never assume missing context. Ask questions if uncertain.**
- **Never hallucinate libraries or functions** – only use known, verified Python packages.
- **Always confirm file paths and module names** exist before referencing them in code or tests.
- **Never delete or overwrite existing code** unless explicitly instructed to or if part of a task from `TASK.md`.
### 📑 Project Rules
- **Always check files in the `/rules` directory** before writing or modifying code:
  - `python.mdc` - Python coding standards and best practices
  - `database.mdc` - Database best practices for Prisma and Supabase
  - `clean-code.mdc` - General clean code principles and guidelines
  - Any other rule files that may be added in the future
  - **All chat responses should be in Russian** when communicating with users.

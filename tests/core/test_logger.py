"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
"""
import logging
from logging.handlers import TimedRotatingFileHandler
from unittest.mock import patch

import pytest

from src.core.logger import get_logger, setup_loggers


@pytest.fixture
def temp_logs_dir(tmp_path):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤."""
    with patch("src.core.logger.LOGS_DIR", tmp_path):
        yield tmp_path


def test_get_logger_creates_log_file(temp_logs_dir):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞."""
    log_file = "test.log"
    logger = get_logger("test", log_file)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
    log_path = temp_logs_dir / log_file
    assert log_path.exists()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–≥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    assert logger.name == "test"
    assert logger.level == logging.INFO
    assert len(logger.handlers) == 2  # file handler + console handler


def test_get_logger_formatter(temp_logs_dir):
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤."""
    logger = get_logger("test", "formatter_test.log")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è file handler
    file_handler = logger.handlers[0]
    assert isinstance(file_handler, TimedRotatingFileHandler)
    assert file_handler.formatter is not None
    fmt = file_handler.formatter._fmt
    assert "[%(asctime)s]" in fmt
    assert "%(levelname)s" in fmt
    assert "[%(name)s:%(lineno)s]" in fmt
    assert "%(message)s" in fmt


def test_get_logger_rotation_settings(temp_logs_dir):
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤."""
    logger = get_logger(
        "test", "rotation_test.log", when="midnight", interval=1, backup_count=30
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏
    handler = logger.handlers[0]
    assert isinstance(handler, TimedRotatingFileHandler)
    assert (
        handler.when == "MIDNIGHT"
    )  # TimedRotatingFileHandler –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    assert handler.interval == 86400  # 24 —á–∞—Å–∞ * 60 –º–∏–Ω—É—Ç * 60 —Å–µ–∫—É–Ω–¥
    assert handler.backupCount == 30


def test_get_logger_reuse(temp_logs_dir):
    """–¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞."""
    logger1 = get_logger("test_reuse", "reuse_test.log")
    logger2 = get_logger("test_reuse", "reuse_test.log")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ –ª–æ–≥–≥–µ—Ä
    assert logger1 is logger2
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ handlers –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è
    assert len(logger1.handlers) == 2


def test_setup_loggers(temp_logs_dir):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ª–æ–≥–≥–µ—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    loggers = setup_loggers()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
    expected_loggers = {"main", "user", "error", "api", "db"}
    assert set(loggers.keys()) == expected_loggers

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    for name, logger in loggers.items():
        assert isinstance(logger, logging.Logger)
        assert logger.name == name
        assert len(logger.handlers) == 2

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π handler
        file_handler = logger.handlers[0]
        assert isinstance(file_handler, TimedRotatingFileHandler)
        assert file_handler.baseFilename.endswith(f"{name}.log")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if name == "error":
            assert logger.level == logging.ERROR
        else:
            assert logger.level == logging.INFO


def test_error_logger_level(temp_logs_dir):
    """–¢–µ—Å—Ç —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è error logger."""
    loggers = setup_loggers()
    error_logger = loggers["error"]
    assert error_logger.level == logging.ERROR


@pytest.mark.asyncio
async def test_logger_async_usage(temp_logs_dir):
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–¥–µ."""
    logger = get_logger("test_async", "async_test.log")

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    test_message = "Test async logging"
    logger.info(test_message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Ñ–∞–π–ª
    log_path = temp_logs_dir / "async_test.log"
    with open(log_path, "r", encoding="utf-8") as f:
        log_content = f.read()
        assert test_message in log_content


def test_logger_encoding(temp_logs_dir):
    """–¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode –≤ –ª–æ–≥–∞—Ö."""
    logger = get_logger("test_unicode", "unicode_test.log")

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Unicode
    test_message = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏ üêç"
    logger.info(test_message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ
    log_path = temp_logs_dir / "unicode_test.log"
    with open(log_path, "r", encoding="utf-8") as f:
        log_content = f.read()
        assert test_message in log_content

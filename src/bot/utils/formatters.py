from typing import Dict, List, Tuple

from src.ai import generate_meal_examples


def format_kbju_result(calculation: Dict) -> str:
    """
    Format KBJU calculation result as a formatted message

    Args:
        calculation: Dict with calculation results

    Returns:
        str: Formatted message with HTML formatting
    """
    calories = calculation["calories"]
    protein = calculation["protein"]
    fat = calculation["fat"]
    carbs = calculation["carbs"]
    meal_count = calculation["meal_count"]

    # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ö–ë–ñ–£
    message = (
        f"<b>üî¢ –í–∞—à —Ä–∞—Å—á–µ—Ç –ö–ë–ñ–£:</b>\n\n"
        f"<b>üìä –°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π:</b> {calories} –∫–∫–∞–ª\n\n"
        f"<b>ü•© –ë–µ–ª–∫–∏:</b> {protein} –≥\n"
        f"<b>ü•ë –ñ–∏—Ä—ã:</b> {fat} –≥\n"
        f"<b>üçû –£–≥–ª–µ–≤–æ–¥—ã:</b> {carbs} –≥\n\n"
        f"<b>üçΩÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏:</b> {meal_count}\n\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI
    try:
        kbju_data = {
            "calories": calories,
            "protein": protein,
            "fat": fat,
            "carbs": carbs,
        }

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –±–ª—é–¥
        meal_plan = generate_meal_examples(kbju_data)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        message += "<b>üìù –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏:</b>\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø—Ä–∏–µ–º–µ –ø–∏—â–∏
        for meal in meal_plan:
            meal_name = meal["meal"]
            meal_calories = meal["calories"]
            meal_protein = meal["protein"]
            meal_fat = meal["fat"]
            meal_carbs = meal["carbs"]
            meal_examples = meal.get("examples", "")

            message += (
                f"<b>{meal_name}</b>\n"
                f"üî∏ –ö–∞–ª–æ—Ä–∏–∏: {meal_calories} –∫–∫–∞–ª\n"
                f"üî∏ –ë–µ–ª–∫–∏: {meal_protein} –≥\n"
                f"üî∏ –ñ–∏—Ä—ã: {meal_fat} –≥\n"
                f"üî∏ –£–≥–ª–µ–≤–æ–¥—ã: {meal_carbs} –≥\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –±–ª—é–¥, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if meal_examples:
                message += f"<b>üç≤ –ü—Ä–∏–º–µ—Ä—ã –±–ª—é–¥:</b> {meal_examples}\n"

            message += "\n"

    except Exception:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
        pass

    return message


def format_user_data_summary(data: Dict) -> str:
    """
    Format user data summary for confirmation

    Args:
        data: Dict with user data

    Returns:
        str: Formatted message with HTML formatting
    """
    # Map activity values to readable text
    activity_map = {"low": "–ù–∏–∑–∫–∏–π", "medium": "–°—Ä–µ–¥–Ω–∏–π", "high": "–í—ã—Å–æ–∫–∏–π"}

    # Map goal values to readable text
    goal_map = {
        "weightloss": "–ü–æ—Ö—É–¥–µ–Ω–∏–µ",
        "musclegain": "–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
        "recomp": "–†–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è",
    }

    # Map gender values to readable text
    gender_map = {"male": "–ú—É–∂—Å–∫–æ–π", "female": "–ñ–µ–Ω—Å–∫–∏–π"}

    gender = gender_map.get(data.get("gender", ""), "–ù–µ —É–∫–∞–∑–∞–Ω")
    age = data.get("age", "–ù–µ —É–∫–∞–∑–∞–Ω")
    height = data.get("height", "–ù–µ —É–∫–∞–∑–∞–Ω")
    weight = data.get("weight", "–ù–µ —É–∫–∞–∑–∞–Ω")
    activity = activity_map.get(data.get("activity", ""), "–ù–µ —É–∫–∞–∑–∞–Ω")
    goal = goal_map.get(data.get("goal", ""), "–ù–µ —É–∫–∞–∑–∞–Ω")

    message = (
        f"<b>üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"<b>üë§ –ü–æ–ª:</b> {gender}\n"
        f"<b>üî¢ –í–æ–∑—Ä–∞—Å—Ç:</b> {age} –ª–µ—Ç\n"
        f"<b>üìè –†–æ—Å—Ç:</b> {height} —Å–º\n"
        f"<b>‚öñÔ∏è –í–µ—Å:</b> {weight} –∫–≥\n"
        f"<b>üèÉ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {activity}\n"
        f"<b>üéØ –¶–µ–ª—å:</b> {goal}\n\n"
        f"–ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª</b>.\n"
        f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."
    )

    return message


def distribute_meals(
    calories: int, protein: float, fat: float, carbs: float, meal_count: int
) -> List[Tuple[str, Dict]]:
    """
    Distribute total nutrition values across meals

    Args:
        calories: Total daily calories
        protein: Total daily protein (g)
        fat: Total daily fat (g)
        carbs: Total daily carbs (g)
        meal_count: Number of meals per day

    Returns:
        List of tuples (meal_name, meal_data)
    """
    # Define meal names and distributions based on meal count
    if meal_count == 3:
        meals = [("–ó–∞–≤—Ç—Ä–∞–∫", 0.3), ("–û–±–µ–¥", 0.45), ("–£–∂–∏–Ω", 0.25)]
    else:  # 4 meals
        meals = [("–ó–∞–≤—Ç—Ä–∞–∫", 0.25), ("–û–±–µ–¥", 0.35), ("–ü–æ–ª–¥–Ω–∏–∫", 0.15), ("–£–∂–∏–Ω", 0.25)]

    # Calculate values for each meal
    result = []
    for name, ratio in meals:
        meal_calories = round(calories * ratio)
        meal_protein = round(protein * ratio, 1)
        meal_fat = round(fat * ratio, 1)
        meal_carbs = round(carbs * ratio, 1)

        meal_data = {
            "calories": meal_calories,
            "protein": meal_protein,
            "fat": meal_fat,
            "carbs": meal_carbs,
        }

        result.append((name, meal_data))

    return result

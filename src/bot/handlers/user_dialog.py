from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from src.bot.keyboards.inline_kb import (
    get_activity_keyboard,
    get_confirmation_keyboard,
    get_gender_keyboard,
    get_goal_keyboard,
    get_start_keyboard,
)
from src.bot.models.state import UserForm
from src.bot.repository.user_repository import UserRepository
from src.bot.services.calculation import CalculationService
from src.bot.services.subscription import SubscriptionService
from src.bot.utils.formatters import format_kbju_result, format_user_data_summary
from src.bot.utils.validators import validate_age, validate_height, validate_weight
from src.config.settings import ADMIN_USER_IDS
from src.core.logger import error_logger, user_logger

# Initialize router
router = Router()

# Configuration
REQUIRED_CHANNEL = "@ivanfit_health"


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async def safe_edit_message(message, text, reply_markup=None, parse_mode=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ TelegramBadRequest
    """
    try:
        await message.edit_text(
            text=text, reply_markup=reply_markup, parse_mode=parse_mode
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            pass
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ BadRequest, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            error_logger.warning(f"Failed to edit message: {e!s}. Sending new message.")
            await message.answer(
                text=text, reply_markup=reply_markup, parse_mode=parse_mode
            )


# Helper function to check subscription
async def check_subscription_status(bot: Bot, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª."""
    is_subscribed = await SubscriptionService.is_subscribed(
        bot, user_id, REQUIRED_CHANNEL
    )
    user_logger.info(
        f"User {user_id} subscription to {REQUIRED_CHANNEL}: "
        f"{'subscribed' if is_subscribed else 'not subscribed'}"
    )
    return is_subscribed


# Command handlers
@router.message(CommandStart())
async def command_start(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id if message.from_user else "unknown"
    user_logger.info(f"User {user_id} started the bot with /start")

    if message.from_user:
        is_subscribed = await check_subscription_status(bot, message.from_user.id)
        if not is_subscribed:
            await message.answer(
                (
                    f"üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å "
                    f"–Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {REQUIRED_CHANNEL}\n\n"
                    f'–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å".'
                ),
                reply_markup=get_start_keyboard(
                    show_calculation=False, show_subscription_flow=True
                ),
            )
            return

        await message.answer(
            (
                "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ö–ë–ñ–£! "
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
            ),
            reply_markup=get_start_keyboard(
                show_calculation=True, show_subscription_flow=False
            ),
        )
    else:
        # –°–ª—É—á–∞–π, –µ—Å–ª–∏ message.from_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."
        )


# Callback query handlers
@router.callback_query(F.data == "start_calculation")
async def start_calculation_callback(
    callback: CallbackQuery, state: FSMContext, bot: Bot, user_repo: UserRepository
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á–µ—Ç–∞."""
    if not callback.from_user or not callback.message:
        return

    user_id = callback.from_user.id
    user_logger.info(f"User {user_id} clicked 'start_calculation'")

    if not await check_subscription_status(bot, user_id):
        await safe_edit_message(
            callback.message,
            (
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {REQUIRED_CHANNEL}\n\n"
                f'–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å".'
            ),
            reply_markup=get_start_keyboard(
                show_calculation=False, show_subscription_flow=True
            ),
        )
        return

    if await user_repo.user_exists(user_id):
        if await user_repo.is_calculated(user_id) and user_id not in ADMIN_USER_IDS:
            user_logger.info(
                f"User {user_id} tried to recalculate but already has results"
            )
            await safe_edit_message(
                callback.message,
                "–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Ä–∞—Å—á–µ—Ç –ö–ë–ñ–£. "
                "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            )
            return
    else:
        user_logger.info(f"Creating new user: {user_id}")
        await user_repo.create_user(user_id)

    await state.set_state(UserForm.await_gender)
    user_logger.info(f"User {user_id} moved to UserForm.await_gender")
    await safe_edit_message(
        callback.message, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=get_gender_keyboard()
    )


# Gender selection handler
@router.callback_query(StateFilter(UserForm.await_gender), F.data.startswith("gender:"))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    """Process gender selection"""
    if not callback.data or not callback.from_user:
        return

    user_id = callback.from_user.id
    # Extract gender from callback data
    gender = callback.data.split(":")[1]  # "gender:male" -> "male"
    user_logger.info(f"User {user_id} selected gender: {gender}")

    # Save gender to state
    await state.update_data(gender=gender)

    # Move to next state - ask for age
    await state.set_state(UserForm.await_age)
    user_logger.info(f"User {user_id} moved to age input")
    await safe_edit_message(callback.message, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):")


# Age input handler
@router.message(StateFilter(UserForm.await_age))
async def process_age(message: Message, state: FSMContext):
    """Process age input"""
    if not message.text or not message.from_user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    user_id = message.from_user.id
    # Validate age
    is_valid, age_value, error_msg = validate_age(message.text)

    if not is_valid and error_msg:
        user_logger.warning(
            f"User {user_id} entered invalid age: {message.text}. Error: {error_msg}"
        )
        await message.answer(error_msg)
        return

    user_logger.info(f"User {user_id} entered age: {age_value}")

    # Save age to state
    await state.update_data(age=age_value)

    # Move to next state - ask for height
    await state.set_state(UserForm.await_height)
    user_logger.info(f"User {user_id} moved to height input")
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):")


# Height input handler
@router.message(StateFilter(UserForm.await_height))
async def process_height(message: Message, state: FSMContext):
    """Process height input"""
    if not message.text or not message.from_user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    user_id = message.from_user.id
    # Validate height
    is_valid, height_value, error_msg = validate_height(message.text)

    if not is_valid and error_msg:
        user_logger.warning(
            f"User {user_id} entered invalid height: {message.text}. Error: {error_msg}"
        )
        await message.answer(error_msg)
        return

    user_logger.info(f"User {user_id} entered height: {height_value}")

    # Save height to state
    await state.update_data(height=height_value)

    # Move to next state - ask for weight
    await state.set_state(UserForm.await_weight)
    user_logger.info(f"User {user_id} moved to weight input")
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö):")


# Weight input handler
@router.message(StateFilter(UserForm.await_weight))
async def process_weight(message: Message, state: FSMContext):
    """Process weight input"""
    if not message.text or not message.from_user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    user_id = message.from_user.id
    # Validate weight
    is_valid, weight_value, error_msg = validate_weight(message.text)

    if not is_valid and error_msg:
        user_logger.warning(
            f"User {user_id} entered invalid weight: {message.text}. Error: {error_msg}"
        )
        await message.answer(error_msg)
        return

    user_logger.info(f"User {user_id} entered weight: {weight_value}")

    # Save weight to state
    await state.update_data(weight=weight_value)

    # Move to next state - ask for activity level
    await state.set_state(UserForm.await_activity)
    user_logger.info(f"User {user_id} moved to activity selection")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n"
        "‚Ä¢ –ù–∏–∑–∫–∏–π ‚Äî –µ—Å–ª–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º, –ø–æ—á—Ç–∏ –Ω–µ —Ö–æ–¥–∏—Ç–µ –ø–µ—à–∫–æ–º –∏ –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Å–ø–æ—Ä—Ç–æ–º.\n"
        "‚Ä¢ –°—Ä–µ–¥–Ω–∏–π ‚Äî –µ—Å–ª–∏ –≤—ã —Ö–æ–¥–∏—Ç–µ –ø–µ—à–∫–æ–º —Ö–æ—Ç—è –±—ã 30‚Äì60 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –∏–ª–∏ –¥–µ–ª–∞–µ—Ç–µ –ª—ë–≥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1‚Äì3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é.\n"
        "‚Ä¢ –í—ã—Å–æ–∫–∏–π ‚Äî –µ—Å–ª–∏ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Å–ø–æ—Ä—Ç–æ–º 3‚Äì5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –∏–ª–∏ —É –≤–∞—Å —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞.",
        reply_markup=get_activity_keyboard(),
    )


# Activity level selection handler
@router.callback_query(
    StateFilter(UserForm.await_activity), F.data.startswith("activity:")
)
async def process_activity(callback: CallbackQuery, state: FSMContext):
    """Process activity level selection"""
    if not callback.data:
        return

    # Extract activity level from callback data
    activity = callback.data.split(":")[1]  # "activity:low" -> "low"

    # Save activity level to state
    await state.update_data(activity=activity)

    # Move to next state - ask for goal
    await state.set_state(UserForm.await_goal)
    await safe_edit_message(
        callback.message,
        "–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å?",
        reply_markup=get_goal_keyboard(),
    )


# Goal selection handler
@router.callback_query(StateFilter(UserForm.await_goal), F.data.startswith("goal:"))
async def process_goal(callback: CallbackQuery, state: FSMContext):
    """Process goal selection"""
    if not callback.data:
        return

    # Extract goal from callback data
    goal = callback.data.split(":")[1]  # "goal:weightloss" -> "weightloss"

    # Save goal to state
    await state.update_data(goal=goal)

    # Move to confirmation state
    await state.set_state(UserForm.confirmation)

    # Show confirmation keyboard with user data summary
    user_data = await state.get_data()
    message_text = (
        format_user_data_summary(user_data)
        .replace(
            "–ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.",
            "",
        )
        .strip()
    )
    await safe_edit_message(
        callback.message,
        message_text,
        reply_markup=get_confirmation_keyboard(),
        parse_mode="HTML",
    )


# Edit data handlers
@router.callback_query(StateFilter(UserForm.confirmation), F.data.startswith("edit:"))
async def process_edit(callback: CallbackQuery, state: FSMContext):
    """Process edit button clicks"""
    if not callback.data:
        return

    # Extract field to edit from callback data
    field = callback.data.split(":")[1]  # "edit:gender" -> "gender"

    if field == "gender":
        await state.set_state(UserForm.await_gender)
        await safe_edit_message(
            callback.message, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=get_gender_keyboard()
        )
    elif field == "age":
        await state.set_state(UserForm.await_age)
        await safe_edit_message(callback.message, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):")
    elif field == "height":
        await state.set_state(UserForm.await_height)
        await safe_edit_message(callback.message, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):")
    elif field == "weight":
        await state.set_state(UserForm.await_weight)
        await safe_edit_message(callback.message, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö):")
    elif field == "activity":
        await state.set_state(UserForm.await_activity)
        await safe_edit_message(
            callback.message,
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n"
            "(–ï—Å–ª–∏ –≤–µ—Å—å –¥–µ–Ω—å —Å–∏–¥–∏—Ç–µ ‚Äî –≤—ã–±–∏—Ä–∞–π—Ç–µ –Ω–∏–∑–∫–∏–π. "
            "–ï—Å–ª–∏ –¥–≤–∏–≥–∞–µ—Ç–µ—Å—å –∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å ‚Äî –≤—ã–±–∏—Ä–∞–π—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –∏–ª–∏ –≤—ã—Å–æ–∫–∏–π.)",
            reply_markup=get_activity_keyboard(),
        )
    elif field == "goal":
        await state.set_state(UserForm.await_goal)
        await safe_edit_message(
            callback.message,
            "–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å?",
            reply_markup=get_goal_keyboard(),
        )


# Confirmation handler
@router.callback_query(StateFilter(UserForm.confirmation), F.data == "confirm")
async def process_confirm(
    callback: CallbackQuery, state: FSMContext, user_repo: UserRepository
):
    """Process confirmation button click"""
    if not callback.from_user:
        return

    # Set calculation state
    await state.set_state(UserForm.calculation)

    # Get user data from state
    user_data = await state.get_data()

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø–æ–ª–µ activity –≤ activity_factor
    activity_values = {"low": 1.2, "medium": 1.55, "high": 1.725}
    activity = user_data.get("activity", "medium")
    activity_factor = activity_values.get(activity, 1.55)

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    db_data = {
        "gender": user_data.get("gender"),
        "age": user_data.get("age"),
        "height": user_data.get("height"),
        "weight": user_data.get("weight"),
        "activity_factor": activity_factor,
        "goal": user_data.get("goal"),
    }

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    goal = user_data.get("goal", "default")

    # Calculate KBJU
    result = CalculationService.calculate_kbju(
        gender=user_data["gender"],
        weight=user_data["weight"],
        height=user_data["height"],
        age=user_data["age"],
        activity=user_data["activity"],
        goal=goal,
    )

    # Format result message
    message_text = format_kbju_result(result)

    # Send result
    await safe_edit_message(callback.message, message_text, parse_mode="HTML")

    # Save user data to database
    user_id = callback.from_user.id
    await user_repo.update_user_data(user_id, db_data)

    # Mark user as calculated
    await user_repo.mark_calculated(user_id)

    # Finish the dialog
    await state.set_state(UserForm.finish)
    await state.clear()


# Handle messages during active dialog
@router.message(~StateFilter(None), ~F.text.startswith("/"))
async def process_unknown_message(message: Message):
    """Handle any messages during active dialog that don't match other handlers"""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞."
    )


# Subscription check handler
@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback_handler(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    if not callback.from_user or not callback.message:
        return

    user_id = callback.from_user.id
    user_logger.info(f"User {user_id} clicked 'check_subscription'")
    is_subscribed = await check_subscription_status(bot, user_id)

    if not is_subscribed:
        await safe_edit_message(
            callback.message,
            (
                f"‚ùå –í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª {REQUIRED_CHANNEL}.\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, "
                f"–∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–Ω–æ–≤–∞."
            ),
            reply_markup=get_start_keyboard(
                show_calculation=False, show_subscription_flow=True
            ),
        )
        await callback.answer(
            "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True
        )
        return

    await safe_edit_message(
        callback.message,
        (
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç –ö–ë–ñ–£. "
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        ),
        reply_markup=get_start_keyboard(
            show_calculation=True, show_subscription_flow=False
        ),
    )
    await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=False)
